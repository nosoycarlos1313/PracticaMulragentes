class Comprador {

    constructor(ip, puerto, ipMonitor, puertoMonitor, log) {
		this.ip = ip;
		this.puerto = puerto;
		this.ipMonitor = ipMonitor;
		this.puertoMonitor = puertoMonitor;
		this.id = 0;
		this.listaCompra = [];
		this.listaTiendas = [];
		this.tiempoConsumido = 0;
		this.log = log;

		this.GestorMensajes = new MessageManager(ipMonitor, puertoMonitor, ip, log);
	}

    productsLeft(){

        if (this.listaCompra.length == 0){
            return false;
        }
        
        for (var producto of this.listaCompra) {
            if (parseFloat(producto.cantidad) != 0){
                return true;
            }
        }
            
        return false;
    }
    
    addToLog(string) {
        this.log.push(string + "\n");
        requestUpdate(this.id);
    }

    async altaACK() {
        var mensaje = {
            tipo_emisor:'comprador',
            id_emisor: this.id,
            ip_emisor: this.ip,
            puerto_emisor: this.puerto,
            tipo_receptor: 'monitor',
            ip_monitor: this.ipMonitor,
            puerto_monitor: this.puertoMonitor,//30
            protocolo:'alta',
            tipo: 'MSI',
        }

        var respuesta = await this.GestorMensajes.enviarXML(mensaje);

        return respuesta;
    }

    async altaMCI(){
        var respuesta_mci = await this.GestorMensajes.leerXML();

        return respuesta_mci;
    }

    async entrarTienda() {
        var mensaje = {
            tipo_emisor:'comprador',
            id_emisor: this.id,
            ip_emisor: this.ip,
            puerto_emisor: this.puerto,
            tipo_receptor: 'tienda',
            id_receptor: this.listaTiendas[tiendaActual].id_tienda,
            ip_receptor: this.listaTiendas[tiendaActual].ip_tienda,
            puerto_receptor: this.listaTiendas[tiendaActual].puerto_tienda,//30
            protocolo:'entrada_tienda',
            tipo: 'MSET',
            productos: this.listaCompra,
            tiendas: this.listaTiendas
        }

        var respuesta_entrada = await this.GestorMensajes.enviarXML(mensaje);

        return respuesta_entrada;
    }

    async compraACK() {
        var mensaje = {
            tipo_emisor:'comprador',
            id_emisor: this.id,
            ip_emisor: this.ip,
            puerto_emisor: this.puerto,
            tipo_receptor: 'tienda',
            id_receptor: this.listaTiendas[tiendaActual].id_tienda,
            ip_receptor: this.listaTiendas[tiendaActual].ip_tienda,
            puerto_receptor: this.listaTiendas[tiendaActual].puerto_tienda,//30
            protocolo:'compra',
            tipo: 'MSIP',
            productos: this.listaCompra,
            tiendas: this.listaTiendas
        }

        var respuesta_msip = await this.GestorMensajes.enviarXML(mensaje);

        return respuesta_msip;
    }

    async compraMIP(){
        var respuesta_mip = await this.GestorMensajes.leerXML();

        return respuesta_mip;
    }

    async askForShops(tiendaActual) {
        var mensaje = {
            tipo_emisor:'comprador',
            id_emisor: this.id,
            ip_emisor: this.ip,
            puerto_emisor: this.puerto,
            tipo_receptor: 'tienda',
            id_receptor: this.listaTiendas[tiendaActual].id_tienda,
            ip_receptor: this.listaTiendas[tiendaActual].ip_tienda,
            puerto_receptor: this.listaTiendas[tiendaActual].puerto_tienda,//30
            protocolo:'solicitar_tiendas',
            tipo: 'MSIT',
            productos: this.listaCompra,
            tiendas: this.listaTiendas
        }

        var respuesta = await this.GestorMensajes.enviarXML(mensaje);

        return respuesta;
    }
    
    async run() {

        var inicioActividad;

        await this.pideIni().then(function (resultado1) {
            inicioActividad = resultado1
        });

        if (inicioActividad == -1) {
            this.addToLog("El comprador " + this.id + " ha obtenido los datos del monitor " + this.ipMonitor + " con fracaso.");
            return null; // Finaliza si error devolviendo nulo
        }
    
        this.addToLog("El comprador " + this.id + " ha obtenido los datos del monitor " + this.ipMonitor + " con exito.");
    
        var tiendaActual = 0;

        // Mientras queden productos por comprar
        while (this.productsLeft() && tiendaActual < this.listaTiendas.length) {

            var entradaTienda;

            await this.entrarTienda().then(function (resultado2) {
                entradaTienda = resultado2
            });

            if ((entradaTienda == -1) && (entradaTienda.infoMensaje.tipo=='ACK')) {
                this.addToLog("El comprador " + this.id + " ha fallado al entrar a la tienda " + this.listaTiendas[tiendaActual].id_tienda);
                return null; // Finaliza si error devolviendo nulo
            }
    
            this.addToLog("El comprador " + this.id + " ha entrado a la tienda " + this.listaTiendas[tiendaActual].id_tienda + " con exito.");
    
            var error = false; // Para indicar cuando hay algun error
    
            var solicitudProductos;
            await this.compraACK(tiendaActual).then(function (resultado3) {
                solicitudProductos = resultado3
            });

            var productosTienda;
            await this.compraMIP(tiendaActual).then(function (resultado4) {
                productosTienda = resultado4
            });
            
            if (((solicitudProductos=!-1) && (solicitudProductos.infoMensaje.tipo=='ACK')) && (productosTienda=!-1)) {

                this.addToLog("El cliente " + this.id + " se dispone a comprar productos a la tienda " + this.listaTiendas[tiendaActual].id_tienda);
                
                productos=productosTienda.lista_productos;
                
                this.reduceProductsQuantity(productos);
    
            } else {
                // Error en el envio de la lista de la compra
                this.addToLog("El cliente " + this.id + " ha obtenido un error al comprar productos");
                error = true;
            }
    
            //Si aun quedan productos por comprar, preguntamos a los compradores por otras tiendas
            if (this.productsLeft() && !error) {

                //AÃ±adimos al log y preguntamos
                this.addToLog("El cliente " + this.id + " tiene productos restantes por comprar.");
                
                // Espera a que un cliente le pase la lista de las tiendas
                var preguntarTiendas;

                await this.askForShops(tiendaActual).then(function (resultado5) {
                    preguntarTiendas = resultado5
                });
                    
                if (preguntarTiendas != -1) {
                    // var tiendas = resultado['body']['lista_tiendas'];
                    var tiendas = preguntarTiendas.body.lista_tiendas;
                    
                    this.listaTiendas = this.agregarTiendas(tiendas);
                } else {
                    this.addToLog("El cliente " + this.id + " ha obtenido un error al recibir tiendas");
                    error = true;
                }
            }
    
            var salirTienda;

            await this.salidaTienda(tiendaActual).then(function (resultado6) {
                salirTienda = resultado6
            });

            if (salirTienda != -1) {
                this.addToLog("El cliente " + this.id + " ha salido de la tienda " + this.listaTiendas[tiendaActual].id_tienda)
            } else {
                // Error al salir de la tienda actual
                this.addToLog("El cliente " + this.id + " ha obtenido un error al salir de la tienda");
                error = true;
            }

            // Avanzamos a la siguiente tienda
            tiendaActual = tiendaActual + 1;
        }
            
        //Fin de la compra
        if (this.productsLeft()) {
            //Compra fallida (no hemos comprado todos los productos)
            this.addToLog("El cliente " + this.id + " no ha sido capaz de terminar sus compras con exito.");
        } else {
            this.addToLog("El cliente " + this.id + " ha terminado sus compras con exito.");
        }
    
        //Desconectamos al cliente
        this.finalizarCliente();
    }
}
